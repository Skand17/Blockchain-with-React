{"version":3,"sources":["components/Blockdetail.jsx","components/Latestblocks.jsx","components/Landing.jsx","App.js","serviceWorker.js","index.js"],"names":["ModalDetail","props","state","open","this","blockDetail","difficulty","gasLimit","parentHash","hash","size","stateRoot","transactionsRoot","totalDifficulty","close","Modal","onClose","Header","Content","Description","Actions","Button","color","onClick","Component","apiKey","process","baseURL","LatestBlocks","componentDidMount","getBlocks","a","latestBlock","blocks","i","axios","get","toString","result","data","push","Table","Row","Cell","textAlign","setBlockDetail","setState","latestBlocks","openModal","address","balance","Container","className","as","Input","onChange","e","target","value","renderBalance","Icon","name","celled","HeaderCell","Body","closeModal","Landing","getLatestBlocks","parseInt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7049ffd.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { Button ,  Modal } from 'semantic-ui-react'\n\nclass ModalDetail extends Component {\n\n    constructor(props){\n        super(props)\n        this.state  = {\n            open : false\n        }\n    }\n\n\n    // Rendered Modal Popup for block details\n    \n    render(){\n\n        const { blockDetail : {   difficulty , gasLimit, parentHash, hash,  size ,stateRoot,  transactionsRoot, totalDifficulty } , open, close } = this.props\n\n        return (\n            <Modal\n                onClose={() => close(false)}\n                open={open}\n            >\n            <Modal.Header>Block Details</Modal.Header>\n            <Modal.Content>\n              <Modal.Description>\n                    <ul>\n                        <li>\n                            <label>Hash</label>\n                            <span>{hash}</span>\n                        </li>\n                        <li>\n                            <label>Parent Hash</label>\n                            <span>{parentHash}</span>\n                        </li>\n                        <li>\n                            <label>Difficulty</label>\n                            <span>{difficulty}</span>\n                        </li>\n                        <li>\n                            <label>State Root</label>\n                            <span>{stateRoot}</span>\n                        </li>\n                        <li>\n                            <label>Gas Limit</label>\n                            <span>{gasLimit}</span>\n                        </li>\n                        <li>\n                            <label>Size</label>\n                            <span>{size}</span>\n                        </li>\n                        <li>\n                            <label>Transactions Root</label>\n                            <span>{transactionsRoot}</span>\n                        </li>\n                        <li>\n                            <label>Total Difficulty</label>\n                            <span>{totalDifficulty}</span>\n                        </li>\n                    </ul>\n              </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button color='black' onClick={() => close(false)}>\n                Close\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        )\n    }\n\n}\n\nexport default ModalDetail\n","import React, { Component } from \"react\";\nimport { Table, Button } from \"semantic-ui-react\";\nimport ModalDetail from './Blockdetail'\nimport { Container,Header, Input, Icon } from 'semantic-ui-react'\nimport axios from \"axios\";\n\nconst apiKey = process.env.REACT_APP_ETHERSCAN_API_KEY;\n\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\n\nclass LatestBlocks extends Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      latestBlocks: [],\n      openModal : false,\n      address : null,\n      balance : null,\n      blockDetail : {}\n    };\n  }\n\n  // Initial Mounting\n  componentDidMount = () => {\n    this.getBlocks();\n  };\n\n  setBlockDetail(data){\n    this.setState({\n      openModal : true,\n      blockDetail : data\n    })\n  }\n\n  // Close modal\n  closeModal(){\n    this.setState({\n      openModal : false\n    })\n  }\n\n\n  // Render Balance\n\n  async renderBalance(){\n\n    const { address } = this.state\n    const balance = await axios.get(baseURL + `?module=account&action=balance&address=${address}&apikey=${apiKey}`);\n    this.setState({\n      balance : balance.data.result\n    })\n  }\n\n  getBlocks = async () => {\n      const { latestBlock } = this.props;\n      let blocks = [];\n      if (latestBlock) {\n        for (let i = 0; i < 10; i++) {\n          const blockDetail = await axios.get(baseURL + `?module=proxy&action=eth_getBlockByNumber&tag=${(latestBlock - i).toString(16)}&boolean=true&apikey=${apiKey}`);\n          const { result } = blockDetail.data;\n          blocks.push(\n            <Table.Row key={i}>\n              <Table.Cell>\n                {latestBlock - i}\n              </Table.Cell>\n              <Table.Cell textAlign='center'>\n                <Button color=\"green\" onClick={ () => this.setBlockDetail(result) } >Details</Button>\n              </Table.Cell>\n            </Table.Row>\n          );\n          this.setState({\n            latestBlocks: blocks,\n          });\n        }\n      }\n  };\n\n\n  render() {\n\n      const { balance } = this.state\n\n      return (\n        <Container>\n          <Header textAlign=\"center\" className=\"heading-style\" as=\"h2\">Ethereum latest blocks</Header>\n          <Input onChange={ (e) =>  this.setState({ address : e.target.value }) } />\n          <Button  color=\"blue\"  onClick={ () => this.renderBalance()  }>Get Balance <Icon name='right arrow' /></Button>\n          { balance ? <p className=\"current\">Your current balance is {balance}</p> : \"\" }\n\n          <Table celled> \n              <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Block No.</Table.HeaderCell>\n                    <Table.HeaderCell textAlign=\"center\">Action</Table.HeaderCell>\n                  </Table.Row>\n              </Table.Header>\n              <Table.Body>{this.state.latestBlocks}</Table.Body>\n              <ModalDetail  blockDetail={this.state.blockDetail}  close={() => this.closeModal()}  open={this.state.openModal} />\n          </Table>\n        </Container>\n      );\n  }\n}\n\nexport default LatestBlocks;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport LatestBlocks from \"./Latestblocks\";\n\nconst apiKey = process.env.REACT_APP_ETHERSCAN_API_KEY;\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\nclass Landing extends Component {\n\n\n  // Initial Constructor called\n  constructor() {\n    super();\n    this.state = {\n      latestBlock: 0,\n    };\n  }\n\n\n  // Initial component mount\n  async componentDidMount() {\n    const latestBlock = await axios.get(baseURL + `?module=proxy&action=eth_blockNumber&apikey=${apiKey}`);\n    this.setState({\n      latestBlock: parseInt(latestBlock.data.result),\n    })\n  }\n\n  // Rendering latest block on component\n  getLatestBlocks = () => {\n    if (this.state.latestBlock) {\n      return <LatestBlocks latestBlock={this.state.latestBlock}></LatestBlocks>;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n           {this.getLatestBlocks()}\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React from \"react\";\nimport \"./App.css\";\nimport Landing from \"./components/Landing\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Landing/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}